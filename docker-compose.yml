version: "3.7"
networks:
  clonestagram:

services:
  composer:
    image: composer:latest
    container_name: composer
    volumes:
      - ./src:/var/www/html
    working_dir: /var/www/html
    entrypoint: ['composer', '--ignore-platform-reqs']
    networks:
      - clonestagram

  php:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: php
    restart: unless-stopped
    tty: true
    volumes:
      - ./src:/var/www/html
    ports:
      - 9000:80
    networks:
      - clonestagram

  nginx:
    image: nginx:1.21.4-alpine
    container_name: nginx
    restart: unless-stopped
    tty: true
    ports:
      - 8000:80
    volumes:
      - ./src:/var/www/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php
      - mysql
    networks:
      - clonestagram

  mysql:
    image: mysql:5.7
    container_name: mysql
    restart: unless-stopped
    tty: true
    ports:
      - "33069:3306"
    volumes:
      - ./mysql:/var/lib/mysql

    environment:
      MYSQL_DATABASE: 'clonestagram'
      MYSQL_USER: 'root'
      MYSQL_PASSWORD: 'root'
      MYSQL_ROOT_PASSWORD: 'root'
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    networks:
      - clonestagram

  npm:
    image: node:14-alpine
    container_name: npm
    volumes:
      - ./src:/var/www/html
    working_dir: /var/www/html
    entrypoint: ['npm']
    networks:
      - clonestagram

  artisan:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: artisan
    volumes:
      - ./src:/var/www/html
    depends_on:
      - mysql
    working_dir: /var/www/html
    entrypoint: ['php', '/var/www/html/artisan']
    networks:
      - clonestagram